head	2.2;
access;
symbols;
locks; strict;
comment	@ * @;


2.2
date	95.07.14.14.58.26;	author levy;	state Exp;
branches;
next	2.1;

2.1
date	93.12.17.20.23.29;	author njt;	state Exp;
branches;
next	2.0;

2.0
date	93.02.21.22.50.39;	author njt;	state Exp;
branches;
next	1.2;

1.2
date	93.02.21.06.02.26;	author njt;	state Exp;
branches;
next	1.1;

1.1
date	93.02.21.01.43.12;	author njt;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Tweak declarations: "friend" -> "friend class".
@
text
@#ifndef __THREEJET
#define __THREEJET
#include "twojet.h"

#define DIM 2
class ThreeJet {
  double f;
  double fu, fv;
  double fuu, fuv, fvv;
  double fuuv, fuvv;

  ThreeJet(double d, double du, double dv, double duu, double duv, double dvv,
   double duuv, double duvv)
   { f = d; fu = du; fv = dv; fuu = duu; fuv = duv; fvv = dvv;
     fuuv = duuv; fuvv = duvv; }
  public:
  ThreeJet() {}
  ThreeJet(double d, double du, double dv)
   { f = d; fu = du; fv = dv; fuu = fuv = fvv = fuuv = fuvv = 0;}
  operator TwoJet() { return TwoJet(f, fu, fv, fuv); }
  operator double() { return f; }
  operator<(double d) { return f < d; }
  operator>(double d) { return f > d; }
  operator<=(double d) { return f <= d; }
  operator>=(double d) { return f >= d; }
  void operator %=(double d)
   { f = fmod(f, d); if (f < 0) f += d; }
  friend ThreeJet operator+(const ThreeJet x, const ThreeJet y);
  friend ThreeJet operator*(const ThreeJet x, const ThreeJet y);
  friend ThreeJet operator+(const ThreeJet x, double d);
  friend ThreeJet operator*(const ThreeJet x, double d);
  friend ThreeJet Sin(const ThreeJet x);
  friend ThreeJet Cos(const ThreeJet x);
  friend ThreeJet operator^(const ThreeJet x, double n);
  friend ThreeJet Annihilate(const ThreeJet x, int index);
  friend ThreeJet Interpolate(const ThreeJet v1, const ThreeJet v2, const ThreeJet weight);
  friend void printJet(const ThreeJet);
  friend class TwoJet D(const class ThreeJet x, int index);
};

#endif
@


2.1
log
@These should be working
@
text
@d38 1
a38 1
  friend TwoJet D(const ThreeJet x, int index);
@


2.0
log
@Working version
@
text
@d10 1
a10 1
  double fuuu, fuuv, fuvv, fvvv;
d13 1
a13 1
   double duuu, double duuv, double duvv, double dvvv)
d15 1
a15 1
     fuuu = duuu; fuuv = duuv; fuvv = duvv; fvvv = dvvv; }
d19 2
a20 2
   { f = d; fu = du; fv = dv; fuu = fuv = fvv = fuuu = fuuv = fuvv = fvvv = 0;}
  operator TwoJet() { return TwoJet(f, fu, fv, fuu, fuv, fvv); }
d26 2
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 5
extern "C" {
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
}
d14 1
a14 1
   { f = d; fu = du; fv = dv; fuu = duu; fvv = dvv;
d20 1
d26 4
a29 4
  friend ThreeJet Plus(const ThreeJet x, const ThreeJet y);
  friend ThreeJet Times(const ThreeJet x, const ThreeJet y);
  friend ThreeJet Add(const ThreeJet x, double d);
  friend ThreeJet Multiply(const ThreeJet x, double d);
d32 1
a32 2
  friend ThreeJet Power(const ThreeJet x, double n);
  friend ThreeJet D(const ThreeJet x, int index);
d36 1
@


1.1
log
@Initial revision
@
text
@d12 3
a14 3
  double df[DIM];
  double d2f[DIM][DIM];
  double d3f[DIM][DIM][DIM];
d16 4
d21 1
a21 1
  ThreeJet();
d23 1
a23 1
   { *this = ThreeJet(); f = d; df[0] = du; df[1] = dv; }
d27 13
a39 11
  friend ThreeJet Plus(const ThreeJet& x, const ThreeJet& y);
  friend ThreeJet Times(const ThreeJet& x, const ThreeJet& y);
  friend ThreeJet Add(const ThreeJet& x, double d);
  friend ThreeJet Multiply(const ThreeJet& x, double d);
  friend ThreeJet Sin(const ThreeJet& x);
  friend ThreeJet Cos(const ThreeJet& x);
  friend ThreeJet Power(const ThreeJet& x, double n);
  friend ThreeJet D(const ThreeJet& x, int index);
  friend ThreeJet Annihilate(const ThreeJet& x, int index);
  friend ThreeJet Interpolate(const ThreeJet& v1, const ThreeJet& v2, const ThreeJet& weight);
  friend void printJet(const ThreeJet&);
@
