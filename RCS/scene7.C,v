head	2.1;
access;
symbols;
locks; strict;
comment	@ * @;


2.1
date	93.12.17.20.23.29;	author njt;	state Exp;
branches;
next	2.0;

2.0
date	93.02.21.22.50.39;	author njt;	state Exp;
branches;
next	1.2;

1.2
date	93.02.21.06.02.26;	author njt;	state Exp;
branches;
next	1.1;

1.1
date	93.02.21.01.43.12;	author njt;	state Exp;
branches;
next	;


desc
@@


2.1
log
@These should be working
@
text
@#include "threejetvec.h"
#include "figureeight.h"
#include "spline.h"
#include "sphere.h"
extern "C" {
#include <strings.h>
}

double scale = M_PI;
double width = 1/10.0;
double bumpht = -.063;
int scene = 0;

int main(int argc, char **argv) {
  double umin, vmin, umax, vmax;
  double du, dv;
  double time = 0.0;
  double corrstart, pushstart, twiststart, unpushstart, uncorrstart;
  double bendtime;

  bendtime = -1.0;		// -1 means don't do bendtime at all
  corrstart = 0;
  pushstart = .1;
  twiststart = .23;
  unpushstart = .6;
  uncorrstart = .93;
  int binary = 0;

/* start value < 0 means don't do that scene
   old values:
   corrstart = 0;
   pushstart = .133;
   twiststart = .333;
   unpushstart = .667;
   uncorrstart = .933;
*/


  umin = vmin = 0.0;
  umax = vmax = 1.0;
  du = dv = 1./12. + 1e-8;

  argv++;
  while (--argc) {
    if (!strcmp("-scene", argv[0])) {
      scene = 1;
    } else if (!strcmp("-time", argv[0])) {
      time = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-bendtime", argv[0])) {
      bendtime = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-corr", argv[0])) {
      corrstart = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-push", argv[0])) {
      pushstart = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-twist", argv[0])) {
      twiststart = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-unpush", argv[0])) {
      unpushstart = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-uncorr", argv[0])) {
      uncorrstart = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-umin", argv[0])) {
      umin = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-umax", argv[0])) {
      umax = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-vmin", argv[0])) {
      vmin = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-vmax", argv[0])) {
      vmax = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-du", argv[0])) {
      du = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-dv", argv[0])) {
      dv = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-jmax", argv[0]) || !strcmp("-kmax", argv[0])) {
      fprintf(stderr, "sphere: -jmax and -kmax are no longer recognized.\n");
      fprintf(stderr, "use -du and -dv instead.");
      argv++,argc--;
    } else if (!strcmp("-width", argv[0])) {
      width = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-scale", argv[0])) {
      scale = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-bumpht", argv[0])) {
      bumpht = atof(argv[1]);
      argv++; argc--;
    } else if (!strcmp("-bscene", argv[0])) {
      scene = 0;
    } else if (!strcmp("-binary", argv[0])) {
      binary = 1;
    } else {
      fprintf(stderr, "unrecognized argument \"%s\"\n", argv[0]);
    }
    argv++;
  }

  if (bendtime >= 0.0) {
    printScene(BendIn, umin, umax, du, vmin, vmax, dv, bendtime, binary);
  } else {

    /* time = (time - howfar) / chunk */
    if (!scene) 
      if (time >= uncorrstart && uncorrstart >= 0) 
	printScene(UnCorrugate, umin, umax, du, vmin, vmax, dv, 
		   (time - uncorrstart) / (1.0 - uncorrstart), binary);
      else if (time >= unpushstart && unpushstart >= 0) 
	printScene(UnPush, umin, umax, du, vmin, vmax, dv,
		   (time - unpushstart) / 
		   (((uncorrstart < 0) ? 1.0 : uncorrstart) - unpushstart), binary);
      else if (time >= twiststart && twiststart >= 0) 
	printScene(Twist, umin, umax, du, vmin, vmax, dv, 
		   (time - twiststart) / 
		   (((unpushstart < 0) ? 1.0 : unpushstart) - twiststart), binary);
      else if (time >= pushstart && pushstart >= 0) 
	printScene(PushThrough, umin, umax, du, vmin, vmax, dv,
		   (time - pushstart) / 
		   (((twiststart < 0) ? 1.0 : twiststart) - pushstart), binary);
      else if (time >= corrstart && corrstart >= 0) 
	printScene(Corrugate, umin, umax, du, vmin, vmax, dv,
		   (time - corrstart) / 
		   (((pushstart < 0) ? 1.0 : pushstart) - corrstart), binary);
  }

  exit(0);
}






@


2.0
log
@Working version
@
text
@d4 1
d14 6
a19 7
extern TwoJetVec Corrugate(ThreeJet u, ThreeJet v, double t);
extern TwoJetVec PushThrough(ThreeJet u, ThreeJet v, double t);
extern TwoJetVec Twist(ThreeJet u, ThreeJet v, double t);
extern TwoJetVec UnPush(ThreeJet u, ThreeJet v, double t);
extern TwoJetVec UnCorrugate(ThreeJet u, ThreeJet v, double t);
extern TwoJetVec Scene(ThreeJet u, ThreeJet v, double t);

d21 1
a21 5
int main(int argc, char **argv) {
  float umin, vmin, umax, vmax;
  int jmax, kmax;
  float time = 0.0;
  float corrstart, pushstart, twiststart, unpushstart, uncorrstart;
d41 1
a41 1
  jmax = kmax =  12;
d50 3
d80 2
a81 2
    } else if (!strcmp("-jmax", argv[0])) {
      jmax = atoi(argv[1]);
d83 2
a84 2
    } else if (!strcmp("-kmax", argv[0])) {
      kmax = atoi(argv[1]);
d86 4
d104 1
a104 1
      fprintf(stderr, "bad argument!!!!!!\n");
d109 27
a135 23
  /* time = (time - howfar) / chunk */
  if (!scene) 
    if (time >= uncorrstart && uncorrstart >= 0) 
      printScene(UnCorrugate, umin, umax, jmax, vmin, vmax, kmax, 
		 (time - uncorrstart) / (1.0 - uncorrstart), binary);
    else if (time >= unpushstart && unpushstart >= 0) 
      printScene(UnPush, umin, umax, jmax, vmin, vmax, kmax,
		 (time - unpushstart) / 
		 (((uncorrstart < 0) ? 1.0 : uncorrstart) - unpushstart), binary);
    else if (time >= twiststart && twiststart >= 0) 
      printScene(Twist, umin, umax, jmax, vmin, vmax, kmax, 
		 (time - twiststart) / 
		 (((unpushstart < 0) ? 1.0 : unpushstart) - twiststart), binary);
    else if (time >= pushstart && pushstart >= 0) 
      printScene(PushThrough, umin, umax, jmax, vmin, vmax, kmax,
		 (time - pushstart) / 
		 (((twiststart < 0) ? 1.0 : twiststart) - pushstart), binary);
    else if (time >= corrstart && corrstart >= 0) 
      printScene(Corrugate, umin, umax, jmax, vmin, vmax, kmax,
		 (time - corrstart) / 
		 (((pushstart < 0) ? 1.0 : pushstart) - corrstart), binary);
  else if (scene) /* basically for debugging: doesn't corrugate surface */
    printScene(Scene, umin, umax, jmax, vmin, vmax, kmax, time, binary);
d138 6
@


1.2
log
@*** empty log message ***
@
text
@d13 6
a18 6
extern ThreeJetVec Corrugate(ThreeJet u, ThreeJet v, ThreeJet t);
extern ThreeJetVec PushThrough(ThreeJet u, ThreeJet v, ThreeJet t);
extern ThreeJetVec Twist(ThreeJet u, ThreeJet v, ThreeJet t);
extern ThreeJetVec UnPush(ThreeJet u, ThreeJet v, ThreeJet t);
extern ThreeJetVec UnCorrugate(ThreeJet u, ThreeJet v, ThreeJet t);
extern ThreeJetVec Scene(ThreeJet u, ThreeJet v, ThreeJet t);
d31 1
a53 1

a68 1

d98 2
d110 1
a110 1
		 (time - uncorrstart) / (1.0 - uncorrstart));
d114 1
a114 1
		 (((uncorrstart < 0) ? 1.0 : uncorrstart) - unpushstart));
d118 1
a118 1
		 (((unpushstart < 0) ? 1.0 : unpushstart) - twiststart));
d122 1
a122 1
		 (((twiststart < 0) ? 1.0 : twiststart) - pushstart));
d126 1
a126 1
		 (((pushstart < 0) ? 1.0 : pushstart) - corrstart));
d128 1
a128 1
    printScene(Scene, umin, umax, jmax, vmin, vmax, kmax, time);
@


1.1
log
@Initial revision
@
text
@@
